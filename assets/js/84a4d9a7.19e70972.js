(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{130:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return p}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),b=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=b(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=b(t),m=r,p=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?o.a.createElement(p,i(i({ref:n},l),{},{components:t})):o.a.createElement(p,i({ref:n},l))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return b}));var r=t(3),o=t(7),a=(t(0),t(130)),c={title:"MEV Geth Demo"},i={unversionedId:"flashbots-core/miners/mev-geth-demo",id:"flashbots-core/miners/mev-geth-demo",isDocsHomePage:!1,title:"MEV Geth Demo",description:"Launches an MEV GETH node, and shows how a miner may profit from it by accepting MEV",source:"@site/docs/flashbots-core/miners/mev-geth-demo.md",slug:"/flashbots-core/miners/mev-geth-demo",permalink:"/docs/flashbots-core/miners/mev-geth-demo",editUrl:"https://github.com/flashbots/docs/edit/main/docs/flashbots-core/miners/mev-geth-demo.md",version:"current",sidebar:"docs",previous:{title:"MEV Geth",permalink:"/docs/flashbots-core/miners/mev-geth"},next:{title:"MEV Proxy",permalink:"/docs/flashbots-core/miners/mev-proxy"}},s=[{value:"Quickstart",id:"quickstart",children:[]},{value:"Bundle Submission",id:"bundle-submission",children:[{value:"Direct miner transfer",id:"direct-miner-transfer",children:[]},{value:"Contract Transfer",id:"contract-transfer",children:[]}]},{value:"Expected Outputs",id:"expected-outputs",children:[{value:"Simple",id:"simple",children:[]},{value:"Contract",id:"contract",children:[]}]}],l={toc:s};function b(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Launches an MEV GETH node, and shows how a miner may profit from it by accepting MEV\nbundles either via direct ",Object(a.b)("inlineCode",{parentName:"p"},"block.coinbase")," smart contract \"bribes\", or with extra transactions that pay\nthe block's coinbase if it's known ahead of time."),Object(a.b)("h2",{id:"quickstart"},"Quickstart"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"git clone https://github.com/flashbots/mev-geth\ncd mev-geth && make geth && cd ..\ngit clone https://github.com/flashbots/mev-geth-demo\ncd mev-geth-demo\nyarn\nGETH=../mev-geth/build/bin/geth ./run.sh\nyarn run demo-simple\nyarn run demo-contract\n")),Object(a.b)("h2",{id:"bundle-submission"},"Bundle Submission"),Object(a.b)("h3",{id:"direct-miner-transfer"},"Direct miner transfer"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'import { ethers } from \'ethers\'\nimport { FlashbotsBundleProvider } from "ethers-flashbots";\n\n// create the base provider\nlet base = new ethers.providers.JsonRpcProvider("http://localhost:8545")\n// wrap it with the mev-geth provider, the Flashbots MEV-GETH node can be on a different host/port\nlet provider = new FlashbotsBundleProvider(base, "http://mev-geth-api.com")\n\nconst user = ethers.Wallet.createRandom().connect(provider)\nconst nonce = await user.getTransactionCount()\n\nconst COINBASE_ADDRESS = "0x2222222222222222222222222222222222222222"\nconst bribe = ethers.utils.parseEther(\'0.042\')\nconst txs = [\n    {\n        signer: user,\n        transaction: {\n            to: "0x1111111111111111111111111111111111111111",\n            value: ethers.utils.parseEther(\'0.1\'),\n            nonce: nonce,\n        },\n    },\n    {\n        signer: user,\n        transaction: {\n            // The coinbase address of the mining pool of your choice\n            to: COINBASE_ADDRESS,\n            value: bribe,\n            nonce: nonce + 1,\n        }\n    },\n]\n\nconst blk = await provider.getBlockNumber()\n// `result` contains the tx hashes for all txs in the bundle\nconst result = await provider.sendBundle(txs, blk + 1);\nawait result.wait()\n')),Object(a.b)("h3",{id:"contract-transfer"},"Contract Transfer"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'import { ethers } from \'ethers\'\nimport { FlashbotsBundleProvider } from "ethers-flashbots";\n\n// create the base provider\nlet base = new ethers.providers.JsonRpcProvider("http://localhost:8545")\n// wrap it with the mev-geth provider, the Flashbots MEV-GETH node can be on a different host/port\nlet provider = new FlashbotsBundleProvider(base, "http://mev-geth-api.com")\nconst user = ethers.Wallet.createRandom().connect(provider)\n\n// We assume the following contract is deployed:\n// \n// contract Bribe {\n//     function bribe() payable public {\n//         // do whatever else you want here.\n//         block.coinbase.transfer(msg.value);\n//   }\n// }\nconst ADDRESS = "0x1111111111111111111111111111111111111111"\nconst ABI = ["function bribe() payable"]\nconst contract = new ethers.Contract(ADDRESS, ABI, user)\n\nconst txs = [\n  {\n      signer: user,\n      transaction: await contract.populateTransaction.bribe({\n        value: ethers.utils.parseEther("0.216321768999"),\n      })\n  },\n];\n\nconst blk = await provider.getBlockNumber()\n// `result` contains the tx hashes for all txs in the bundle\nconst result = await provider.sendBundle(txs, blk + 1);\nawait result.wait()\n')),Object(a.b)("h2",{id:"expected-outputs"},"Expected Outputs"),Object(a.b)("p",null,"The scripts should give you the following outputs (re-run if they fail, the test may be flaky due to timing):"),Object(a.b)("h3",{id:"simple"},"Simple"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"yarn run demo-simple\nyarn run v1.22.4\n$ ts-node scripts/demo.ts\nFaucet 0xd912AeCb07E9F4e1eA8E6b4779e7Fb6Aa1c3e4D8\nFunding account...this may take a while due to DAG generation in the PoW testnet\nOK\nBalance: 1000000000000000000\nSubmitting bundle\nnull\n{\n  minimumNonceByAccount: { '0x203f54b5F444552447aC71e26EB5AC3f5e3dfaC9': 1 }\n}\nblockNumber: 16\nblockNumber: 17\nblockNumber: 18\nblockNumber: 19\nblockNumber: 20\nblockNumber: 21\nBundle mined\nTransaction mined {\n  to: '0xd912AeCb07E9F4e1eA8E6b4779e7Fb6Aa1c3e4D8',\n  from: '0x203f54b5F444552447aC71e26EB5AC3f5e3dfaC9',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x746e55600e4c8e99d086c9437a2029ddb5977c386cc9638de1e7734fe932108c',\n  transactionHash: '0x2d78109fb01f205685049c5870d5ff5ccc3e7059757cc31a113ae23d5a0e692a',\n  logs: [],\n  blockNumber: 17,\n  confirmations: 10,\n  cumulativeGasUsed: BigNumber { _hex: '0xa410', _isBigNumber: true },\n  status: 1,\n  byzantium: true\n}\nMiner before 1031000000000000000000\nMiner after 1033066666666660000000\nProfit (ETH) 0.06666666666\nProfit equals bribe? true\n\u2728  Done in 15.48s.\n")),Object(a.b)("h3",{id:"contract"},"Contract"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"yarn run demo-contract                                                    <<<\nyarn run v1.22.4\n$ ts-node scripts/contract-bribe-demo.ts\nFunding account...this may take a while due to DAG generation in the PoW testnet\nDeploying bribe contract...\nDeployed at: 0x8A7946D23E5096E8d7C81327d4608454B9c5CF8b\nSubmitting bundle\nnull\n{\n  minimumNonceByAccount: { '0x23C9f032F8763a884e6ce6df838ebf5aEdc4B236': 1 }\n}\nblockNumber: 90\nblockNumber: 91\nblockNumber: 92\nblockNumber: 93\nblockNumber: 94\nBundle mined\nTransaction mined {\n  to: '0x8A7946D23E5096E8d7C81327d4608454B9c5CF8b',\n  from: '0x23C9f032F8763a884e6ce6df838ebf5aEdc4B236',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x70c8', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x4e9a4c65b650dafaf4fb11856bbc6b74eb1050cba719d7a6d50518429035feb8',\n  transactionHash: '0x7f9f615ec4dd49131d9d7722b036c7d7bf506983138e063a762a656b7e4c4346',\n  logs: [],\n  blockNumber: 91,\n  confirmations: 9,\n  cumulativeGasUsed: BigNumber { _hex: '0x70c8', _isBigNumber: true },\n  status: 1,\n  byzantium: true\n}\nMiner before 1177066666666660000000\nMiner after 1179282988435659000000\nProfit (ETH) 0.216321768999\nProfit equals bribe? true\n\u2728  Done in 24.23s.\n")))}b.isMDXComponent=!0}}]);